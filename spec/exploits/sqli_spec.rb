require 'spec_helper'
require 'ronin/exploits/sqli'

describe Exploits::SQLi do
  describe "escape_sql" do
    it "should escape integers" do
      exp = Exploits::SQLi.new(:escape => :integer, :escape_data => 1)
      sql = exp.sql[:or, 1, :eq, 1]

      exp.escape_sql(sql).should == "1 or 1 = 1"
    end

    it "should allow comment-termination of escaped integers" do
      exp = Exploits::SQLi.new(
        :escape => :integer,
        :escape_data => 1,
        :comment_terminate => true
      )
      sql = exp.sql[:or, 1, :eq, 1]

      exp.escape_sql(sql).should == "1 or 1 = 1--"
    end

    it "should escape single-quoted strings" do
      exp = Exploits::SQLi.new(
        :escape => :string,
        :escape_quotes => :single,
        :escape_data => 1
      )
      sql = exp.sql[:or, '1', :eq, '1']

      exp.escape_sql(sql).should == "1' or '1' = '1"
    end

    it "should allow the comment termination of escape strings" do
      exp = Exploits::SQLi.new(
        :escape => :string,
        :escape_quotes => :single,
        :escape_data => 1,
        :comment_terminate => true
      )
      sql = exp.sql[:or, '1', :eq, '1']

      exp.escape_sql(sql).should == "1' or '1' = '1'--"
    end

    it "should comment terminate unescapable strings" do
      exp = Exploits::SQLi.new(
        :escape => :string,
        :escape_quotes => :single,
        :escape_data => 1
      )
      sql = exp.sql[:or, 1, :eq, 1]

      exp.escape_sql(sql).should == "1' or 1 = 1--"
    end

    it "should escape statements" do
      exp = Exploits::SQLi.new(
        :escape => :statement
      )
      sql = exp.sql[:select, [1,2,3,:id], :from, :users]

      exp.escape_sql(sql).should == ";select (1,2,3,id) from users"
    end

    it "should allow comment-termination of escaped statements" do
      exp = Exploits::SQLi.new(
        :escape => :statement,
        :comment_terminate => true
      )
      sql = exp.sql[:select, [1,2,3,:id], :from, :users]

      exp.escape_sql(sql).should == ";select (1,2,3,id) from users--"
    end
  end
end
