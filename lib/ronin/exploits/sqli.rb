#
# Ronin SQL - A Ronin library providing support for SQL related security
# tasks.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/code/sql'
require 'ronin/exploits/web'

module Ronin
  module Exploits
    class SQLi < Web

      # The URL query param to inject into
      property :injectable_param, String

      # The HTTP Header to inject into
      property :injectable_header, String

      # The type of escape strategy to use
      property :escape, Enum[:integer, :string, :statement]

      # The style of string quoting to escape
      property :escape_quotes, Enum[:single, :double]

      # Optional data to use when escaping SQL
      property :escape_data, String

      # Specifies whether to terminate the SQL with a `--` comment
      property :comment_terminate, Boolean

      # HTTP request method (either :get or :post)
      parameter :http_method,
                :default => :get,
                :description => 'HTTP request method to use'

      #
      # Injects the given SQL Statement.
      #
      # @param [String] injection
      #   The SQL Statement to inject.
      #
      # @return [String]
      #   The body from the HTTP response.
      #
      # @since 0.3.0
      #
      def inject_raw(injection)
        url = targeted_url
        options = {:url => url, :headers => {}}

        if self.injectable_param
          url.query_params[self.injectable_param] = injection
        elsif self.injectable_header
          options[:headers].merge!(self.injectable_header => injection)
        end

        case self.request_method
        when :post, 'post'
          return http_post_body(options)
        else
          return http_get_body(options)
        end
      end

      #
      # Injects the given SQL Statement.
      #
      # @param [Code::SQL::Fragment] stmt
      #   The SQL Statement to inject.
      #
      # @return [String]
      #   The body from the HTTP response.
      #
      # @see inject_raw
      #
      # @since 0.3.0
      #
      def inject(stmt)
        inject_raw(escape_sql(stmt))
      end

      def vulnerable?
      end

    end
  end
end
